generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TimelineBasespot {
  id                     BigInt                   @id(map: "timeline_basespots_pkey") @default(autoincrement())
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @db.Timestamptz(6)
  start_date             DateTime?                @db.Timestamptz(6)
  end_date               DateTime?                @db.Timestamptz(6)
  basespot_id            BigInt?
  tribe_name             String
  map                    BigInt?
  server                 String?
  region                 String?
  season                 String?
  cluster                String?
  created_by             String?                  @db.Uuid
  latitude               Float?                   @default(0)
  longitude              Float?                   @default(0)
  basespot               Basespot?                @relation(fields: [basespot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile                Profile?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Map                    Map?                     @relation(fields: [map], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineBasespotDino   TimelineBasespotDino[]
  TimelineBasespotPerson TimelineBasespotPerson[]
  TimelineBasespotRaid   TimelineBasespotRaid[]
}

model Basespot {
  id                     BigInt                   @id(map: "basespot_pkey") @default(autoincrement())
  name                   String
  description            String
  latitude               Float
  longitude              Float
  image                  String?
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  map_id                 BigInt
  estimated_for_players  String?                  @default("0")
  defense_images         String?
  created_by             String?                  @db.Uuid
  turretsetup_image      String?
  updated_at             DateTime?                @db.Timestamptz(6)
  type                   String?
  Profile                Profile?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Map                    Map                      @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineBasespot       TimelineBasespot[]
  TimelineSeasonBasespot TimelineSeasonBasespot[]
}

model Profile {
  id                                                          String                   @id(map: "profiles_pkey") @db.Uuid
  updated_at                                                  DateTime?                @db.Timestamptz(6)
  username                                                    String?                  @unique(map: "profiles_username_key")
  full_name                                                   String?
  avatar_url                                                  String?
  website                                                     String?
  biography                                                   String?
  status                                                      user_status              @default(OFFLINE)
  role_id                                                     String                   @default(dbgenerated("'697b7d70-bab3-4ff9-9c3e-f30b058b621c'::uuid")) @db.Uuid
  created_at                                                  DateTime?                @default(now()) @db.Timestamptz(6)
  updated_by                                                  String?                  @db.Uuid
  steam_user_id                                               String?
  Basespot                                                    Basespot[]
  Message                                                     Message[]
  role_profile_role_idTorole                                  Role                     @relation("profile_role_idTorole", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile                                                     Profile?                 @relation("ProfileToProfile", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Profile                                               Profile[]                @relation("ProfileToProfile")
  Role_Role_created_byToProfile                               Role[]                   @relation("Role_created_byToProfile")
  TimelineBasespot                                            TimelineBasespot[]
  TimelineBasespotPerson                                      TimelineBasespotPerson[]
  TimelineSeason                                              TimelineSeason[]
  TimelineSeasonBasespot                                      TimelineSeasonBasespot[]
  TimelineSeasonEvent                                         TimelineSeasonEvent[]
  TimelineSeasonEvent_TimelineSeasonEvent_updated_byToProfile TimelineSeasonEvent[]    @relation("TimelineSeasonEvent_updated_byToProfile")
  TimelineSeasonPerson                                        TimelineSeasonPerson[]
  Tribe                                                       Tribe[]
  UserRecipe                                                  UserRecipe[]
}

model Role {
  id                               String       @id(map: "roles_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                             String
  created_by                       String?      @db.Uuid
  permissions                      permission[]
  profile_profile_role_idTorole    Profile[]    @relation("profile_role_idTorole")
  Profile_Role_created_byToProfile Profile?     @relation("Role_created_byToProfile", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Tribe {
  id          Int       @id(map: "tribe_pkey") @default(autoincrement())
  name        String
  description String?
  created_at  DateTime? @default(now())
  updated_at  DateTime?
  created_by  String?   @default(dbgenerated("auth.uid()")) @db.Uuid
  updated_by  String?   @db.Uuid
  Profile     Profile?  @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Message {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id String    @default(dbgenerated("auth.uid()")) @db.Uuid
  content    String
  created_at DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  Profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Dino {
  id                             String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at                     DateTime?              @default(now()) @db.Timestamptz(6)
  name                           String
  synonyms                       String?
  description                    String?
  taming_notice                  String?
  can_destroy                    String[]
  base_stats                     Json?
  exp_per_kill                   Float?                 @default(0)
  egg_min                        Float?                 @default(0)
  egg_max                        Float?                 @default(0)
  tdps                           Float?                 @default(0)
  maturation_time                Float?                 @default(0)
  incubation_time                Float?                 @default(0)
  affinity_needed                Float?                 @default(0)
  aff_inc                        Float?                 @default(0)
  flee_threshold                 Float?                 @default(0)
  hitboxes                       Json?
  food_consumption_base          Float?                 @default(0)
  food_consumption_mult          Float?                 @default(0)
  disable_ko                     Boolean?               @default(false)
  violent_tame                   Boolean?               @default(false)
  taming_ineffectiveness         Float?                 @default(0)
  disable_food                   Boolean?               @default(false)
  disable_mult                   Boolean?               @default(false)
  admin_note                     String?
  base_points                    Float?
  non_violent_food_affinity_mult Float?
  non_violent_food_rate_mult     Float?                 @default(0)
  taming_interval                Float?                 @default(0)
  base_taming_time               Float?
  disable_tame                   Boolean?               @default(false)
  x_variant                      Boolean?               @default(false)
  attack                         Json?
  mounted_weaponry               Boolean?               @default(false)
  ridable                        Boolean?               @default(false)
  movement                       Json?                  @default("null")
  type                           String[]
  carryable_by                   String[]
  icon                           String?
  image                          String?
  multipliers                    Json?
  baby_food_consumption_mult     Float?                 @default(0)
  gestation_time                 Float?                 @default(0)
  mating_cooldown_min            BigInt?                @default(0)
  mating_cooldown_max            BigInt?                @default(0)
  temperament                    String?                @default("Passive")
  diet                           String?
  released                       DateTime?              @db.Date
  tamable                        Boolean?               @default(true)
  breedable                      Boolean?               @default(true)
  bp                             String?
  DinoStat                       DinoStat[]
  TimelineBasespotDino           TimelineBasespotDino[]
}

model Item {
  id                                              BigInt                  @id(map: "Items_pkey") @unique @default(autoincrement())
  created_at                                      DateTime?               @default(now()) @db.Timestamptz(6)
  name                                            String
  description                                     String?
  image                                           String?
  max_stack                                       Float?
  weight                                          Float?                  @default(0)
  engram_points                                   Float?                  @default(0)
  stats                                           Json?
  color                                           String?                 @default("#ff0000")
  type                                            String?
  category                                        String                  @default("'Other'::text")
  health                                          Float?                  @default(0)
  food                                            Float?                  @default(0)
  torpor                                          Float?
  visible                                         Boolean?                @default(true)
  affinity                                        Float?                  @default(0)
  torpor_duration                                 Float?                  @default(0)
  damage                                          Float?                  @default(0)
  DinoStat                                        DinoStat[]
  ItemRecipe_ItemRecipe_crafted_item_idToItem     ItemRecipe[]            @relation("ItemRecipe_crafted_item_idToItem")
  ItemRecipe_ItemRecipe_crafting_station_idToItem ItemRecipe[]            @relation("ItemRecipe_crafting_station_idToItem")
  ItemRecipeItem                                  ItemRecipeItem[]
  LootcrateSetEntryItem                           LootcrateSetEntryItem[]

  @@index([stats(ops: JsonbPathOps)], map: "idxginp", type: Gin)
}

model Map {
  id                     BigInt                   @id @default(autoincrement())
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  name                   String                   @unique
  img                    String?
  updated_at             DateTime?                @db.Timestamptz(6)
  Basespot               Basespot[]
  Lootcrate              Lootcrate[]
  MapCoordinate          MapCoordinate[]
  MapNote                MapNote[]
  TimelineBasespot       TimelineBasespot[]
  TimelineSeasonBasespot TimelineSeasonBasespot[]
  TimelineSeasonEvent    TimelineSeasonEvent[]
}

model Lootcrate {
  id                 String         @id(map: "Lootcrates_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at         DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?      @default(now()) @db.Timestamptz(6)
  blueprint          String
  name               String?
  map_id             BigInt
  level_requirement  Json?
  decay_time         Json?
  no_repeat_in_sets  Boolean?       @default(false)
  quality_multiplier Json?
  set_qty            Json?
  color              String?
  latitude           Float?
  longitude          Float?
  Map                Map            @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LootcrateSet       LootcrateSet[]
}

model LootcrateSet {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  lootcrate_id      String              @db.Uuid
  name              String?
  can_repeat_items  Boolean?            @default(false)
  qty_scale         Json?
  weight            Float?
  Lootcrate         Lootcrate           @relation(fields: [lootcrate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  LootcrateSetEntry LootcrateSetEntry[]
}

model LootcrateSetEntry {
  id                    String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  set_id                String                  @db.Uuid
  name                  String?
  weight                Float?
  qty                   Json?
  quality               Json?
  LootcrateSet          LootcrateSet            @relation(fields: [set_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  LootcrateSetEntryItem LootcrateSetEntryItem[]
}

model DinoStat {
  id         String       @id(map: "DinoEffWeight_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @default(now()) @db.Timestamptz(6)
  dino_id    String       @db.Uuid
  item_id    BigInt
  value      Float?
  rank       BigInt?      @default(0)
  type       dinostattype
  Dino       Dino         @relation(fields: [dino_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Item       Item         @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dino_id, item_id, type])
}

model LootcrateSetEntryItem {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  entry_id          String            @db.Uuid
  item_id           BigInt
  value             Float?
  LootcrateSetEntry LootcrateSetEntry @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Item              Item              @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TimelineBasespotDino {
  id                  String           @id(map: "TimelineDino_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @default(now()) @db.Timestamptz(6)
  timelinebasespot_id BigInt
  dino_id             String           @db.Uuid
  name                String?
  birth_date          DateTime?        @db.Timestamptz(6)
  death_date          DateTime?        @db.Timestamptz(6)
  death_cause         String?
  level_wild          BigInt?          @default(0)
  level               BigInt?          @default(0)
  health              Float?           @default(0)
  stamina             Float?           @default(0)
  oxygen              Float?           @default(0)
  food                Float?           @default(0)
  weight              Float?           @default(0)
  melee_damage        Float?           @default(0)
  movement_speed      Float?           @default(0)
  gender              String?          @default("N/A")
  wild_health         Float?           @default(0)
  wild_stamina        Float?           @default(0)
  wild_oxygen         Float?           @default(0)
  wild_food           Float?           @default(0)
  wild_weight         Float?           @default(0)
  wild_melee_damage   Float?           @default(0)
  wild_movement_speed Float?           @default(0)
  Dino                Dino             @relation(fields: [dino_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineBasespot    TimelineBasespot @relation(fields: [timelinebasespot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model TimelineBasespotRaid {
  id                  String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at          DateTime         @unique @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @default(now()) @db.Timestamptz(6)
  timelinebasespot_id BigInt
  raid_start          DateTime?        @default(now()) @db.Timestamptz(6)
  raid_end            DateTime?        @db.Timestamptz(6)
  raid_comment        String?
  attacker_players    String?
  tribe_name          String?
  base_survived       Boolean          @default(false)
  defenders           String?
  TimelineBasespot    TimelineBasespot @relation(fields: [timelinebasespot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model MapCoordinate {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  latitude   Float?
  longitude  Float?
  x          Float?
  y          Float?
  z          Float?
  type       String?
  map_id     BigInt
  Map        Map       @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model MapNote {
  id         String    @id(map: "MapNotes_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  map_id     BigInt
  latitude   Float     @default(0)
  longitude  Float     @default(0)
  x          Float?
  y          Float?
  z          Float?
  note_index BigInt?
  Map        Map       @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ItemRecipeItem {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?  @default(now()) @db.Timestamptz(6)
  item_recipe_id String     @db.Uuid
  item_id        BigInt
  amount         Float      @default(1)
  Item           Item       @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ItemRecipe     ItemRecipe @relation(fields: [item_recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([item_id, item_recipe_id])
  @@index([id], map: "idx_item_recipe_item_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimelineBasespotPerson {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime         @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @db.Timestamptz(6)
  user_id             String?          @db.Uuid
  timelinebasespot_id BigInt
  ingame_name         String?
  TimelineBasespot    TimelineBasespot @relation(fields: [timelinebasespot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Profile             Profile?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([timelinebasespot_id, user_id, ingame_name])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserRecipe {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @db.Timestamptz(6)
  user_id              String                 @db.Uuid
  private              Boolean                @default(true)
  name                 String?
  Profile              Profile                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserRecipeItemRecipe UserRecipeItemRecipe[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserRecipeItemRecipe {
  id             String     @id(map: "UserRecipeItemRecipie_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?  @db.Timestamptz(6)
  user_recipe_id String     @db.Uuid
  item_recipe_id String     @db.Uuid
  amount         BigInt?    @default(1)
  ItemRecipe     ItemRecipe @relation(fields: [item_recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserRecipe     UserRecipe @relation(fields: [user_recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ItemRecipe {
  id                                        String                 @id(map: "ItemRec_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                DateTime               @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime?              @default(now()) @db.Timestamptz(6)
  crafted_item_id                           BigInt
  crafting_station_id                       BigInt?
  crafting_time                             Float?                 @default(1)
  yields                                    Float                  @default(1)
  required_level                            BigInt?
  Item_ItemRecipe_crafted_item_idToItem     Item                   @relation("ItemRecipe_crafted_item_idToItem", fields: [crafted_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Item_ItemRecipe_crafting_station_idToItem Item?                  @relation("ItemRecipe_crafting_station_idToItem", fields: [crafting_station_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ItemRecipeItem                            ItemRecipeItem[]
  UserRecipeItemRecipe                      UserRecipeItemRecipe[]

  @@unique([crafted_item_id, crafting_station_id], map: "ItemRec_crafted_item_id_crafting_station_id_key")
  @@index([id], map: "idx_item_recipe_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimelineSeason {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @db.Timestamptz(6)
  server                 String?
  season                 String?
  tribe_name             String?
  season_start_date      DateTime?                @db.Timestamptz(6)
  season_end_date        DateTime?                @db.Timestamptz(6)
  cluster                String?
  created_by             String?                  @db.Uuid
  Profile                Profile?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineSeasonBasespot TimelineSeasonBasespot[]
  TimelineSeasonEvent    TimelineSeasonEvent[]
  TimelineSeasonPerson   TimelineSeasonPerson[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimelineSeasonEvent {
  id                                              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime?      @db.Timestamptz(6)
  timeline_season_id                              String         @db.Uuid
  title                                           String?
  content                                         String?
  map_id                                          BigInt?
  latitude                                        Float?
  longitude                                       Float?
  images                                          String?
  created_by                                      String?        @db.Uuid
  tags                                            String?
  updated_by                                      String?        @db.Uuid
  Profile                                         Profile?       @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Map                                             Map?           @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineSeason                                  TimelineSeason @relation(fields: [timeline_season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile_TimelineSeasonEvent_updated_byToProfile Profile?       @relation("TimelineSeasonEvent_updated_byToProfile", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimelineSeasonBasespot {
  id                 BigInt         @id @default(autoincrement())
  created_at         DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?      @db.Timestamptz(6)
  start_date         DateTime?      @db.Timestamptz(6)
  end_date           DateTime?      @db.Timestamptz(6)
  basespot_id        BigInt?
  map_id             BigInt?
  created_by         String?        @db.Uuid
  latitude           Float?         @default(0)
  longitude          Float?         @default(0)
  timeline_season_id String         @db.Uuid
  Basespot           Basespot?      @relation(fields: [basespot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile            Profile?       @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Map                Map?           @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineSeason     TimelineSeason @relation(fields: [timeline_season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimelineSeasonPerson {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime       @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?      @db.Timestamptz(6)
  user_id            String?        @db.Uuid
  ingame_name        String?
  timeline_season_id String         @db.Uuid
  TimelineSeason     TimelineSeason @relation(fields: [timeline_season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile            Profile?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum permission {
  basespot_delete @map("basespot:delete")
  basespot_create @map("basespot:create")
  basespot_update @map("basespot:update")
  basespot_view   @map("basespot:view")
  role_create     @map("role:create")
  role_update     @map("role:update")
  role_delete     @map("role:delete")
  user_create     @map("user:create")
  user_update     @map("user:update")
  user_delete     @map("user:delete")
  tribe_create    @map("tribe:create")
  tribe_update    @map("tribe:update")
  tribe_delete    @map("tribe:delete")
  timeline_create @map("timeline:create")
  timeline_update @map("timeline:update")
  timeline_delete @map("timeline:delete")
  gamedata_delete @map("gamedata:delete")
  gamedata_update @map("gamedata:update")
  gamedata_create @map("gamedata:create")
}

enum user_status {
  ONLINE
  OFFLINE
}

enum dinostattype {
  food
  gather_efficiency
  weight_reduction
  immobilized_by
  fits_through
  drops
  saddle
  bossrecipe
  engrams
}
