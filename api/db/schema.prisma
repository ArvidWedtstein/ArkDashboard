generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model basespot {
  id                  BigInt               @id
  name                String
  description         String
  latitude            Float
  longitude           Float
  image               String?
  createdAt           DateTime             @default(now()) @db.Timestamptz(6)
  Map                 String               @default("TheIsland")
  estimatedForPlayers String?              @default("0")
  defenseImages       String[]
  createdBy           String?              @db.Uuid
  turretsetup_image   String?
  updatedAt           DateTime?            @db.Timestamptz(6)
  profiles            profiles?            @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeline_basespots  timeline_basespots[]
}

model tribe {
  id                                 Int       @id @default(autoincrement())
  name                               String
  description                        String?
  createdAt                          DateTime  @default(now())
  updatedAt                          DateTime? @updatedAt
  createdBy                          String?   @db.Uuid
  updatedBy                          String?   @default(dbgenerated("auth.uid()")) @db.Uuid
  profiles                           profiles? @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles_profilesTotribe_updatedBy profiles? @relation("profilesTotribe_updatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profiles {
  id                              String               @id @db.Uuid
  updated_at                      DateTime?            @db.Timestamptz(6)
  username                        String?              @unique
  full_name                       String?
  avatar_url                      String?
  website                         String?
  biography                       String?
  status                          user_status          @default(OFFLINE)
  role_id                         String               @default(dbgenerated("'697b7d70-bab3-4ff9-9c3e-f30b058b621c'::uuid")) @db.Uuid
  created_at                      DateTime?            @default(now()) @db.Timestamptz(6)
  roles                           roles                @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  basespot                        basespot[]
  roles_profilesToroles_createdBy roles[]              @relation("profilesToroles_createdBy")
  timeline                        timeline[]
  timeline_basespots              timeline_basespots[]
  tribe                           tribe[]
  tribe_profilesTotribe_updatedBy tribe[]              @relation("profilesTotribe_updatedBy")
}

model roles {
  id                                 String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                               String
  createdBy                          String?      @default(dbgenerated("auth.uid()")) @db.Uuid
  permissions                        permission[]
  profiles_profilesToroles_createdBy profiles?    @relation("profilesToroles_createdBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles                           profiles[]
}

model timeline {
  id                 String               @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt          DateTime?            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?            @db.Timestamptz(6)
  createdBy          String?              @db.Uuid
  profiles           profiles?            @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeline_basespots timeline_basespots[]
}

model timeline_basespots {
  id          BigInt    @id @default(autoincrement())
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  timeline_id String    @db.Uuid
  startDate   DateTime  @default(now()) @db.Date
  endDate     DateTime? @db.Timestamptz(6)
  basespotID  BigInt?
  tribeName   String
  map         String?
  server      String?
  region      String?
  season      String?
  cluster     String?
  location    Json?     @db.Json
  players     String[]
  created_by  String?   @db.Uuid
  raided_by   String?
  raidcomment String?
  basespot    basespot? @relation(fields: [basespotID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles    profiles? @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeline    timeline  @relation(fields: [timeline_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum user_status {
  ONLINE
  OFFLINE
}

enum permission {
  basespot_delete @map("basespot:delete")
  basespot_create @map("basespot:create")
  basespot_update @map("basespot:update")
  basespot_view   @map("basespot:view")
  role_create     @map("role:create")
  role_update     @map("role:update")
  role_delete     @map("role:delete")
  user_create     @map("user:create")
  user_update     @map("user:update")
  user_delete     @map("user:delete")
  tribe_create    @map("tribe:create")
  tribe_update    @map("tribe:update")
  tribe_delete    @map("tribe:delete")
}
