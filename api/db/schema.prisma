generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TimelineBasespot {
  id          BigInt    @id(map: "timeline_basespots_pkey") @default(autoincrement())
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  timeline_id String    @db.Uuid
  startDate   DateTime? @db.Timestamptz(6)
  endDate     DateTime? @db.Timestamptz(6)
  basespot_id BigInt?
  tribeName   String
  map         BigInt?
  server      String?
  region      String?
  season      String?
  cluster     String?
  location    Json?     @db.Json
  players     String[]
  created_by  String?   @db.Uuid
  raided_by   String?
  raidcomment String?
  basespot    Basespot? @relation(fields: [basespot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile     Profile?  @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Map         Map?      @relation(fields: [map], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeline    Timeline  @relation(fields: [timeline_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Basespot {
  id                    BigInt             @id(map: "basespot_pkey") @default(autoincrement())
  name                  String
  description           String
  latitude              Float
  longitude             Float
  image                 String?
  created_at            DateTime?          @default(now()) @db.Timestamptz(6)
  Map                   BigInt
  estimatedForPlayers   String?            @default("0")
  defenseImages         String?
  created_by            String?            @db.Uuid
  turretsetup_image     String?
  updated_at            DateTime?          @db.Timestamptz(6)
  Map_Basespot_MapToMap Map                @relation("Basespot_MapToMap", fields: [Map], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineBasespot      TimelineBasespot[]
}

model Profile {
  id                         String             @id(map: "profiles_pkey") @db.Uuid
  updated_at                 DateTime?          @db.Timestamptz(6)
  username                   String?            @unique(map: "profiles_username_key")
  full_name                  String?
  avatar_url                 String?
  website                    String?
  biography                  String?
  status                     user_status        @default(OFFLINE)
  role_id                    String             @default(dbgenerated("'697b7d70-bab3-4ff9-9c3e-f30b058b621c'::uuid")) @db.Uuid
  created_at                 DateTime?          @default(now()) @db.Timestamptz(6)
  updated_by                 String?            @db.Uuid
  Message                    Message[]
  role_profile_role_idTorole Role               @relation("profile_role_idTorole", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile                    Profile?           @relation("ProfileToProfile", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Profile              Profile[]          @relation("ProfileToProfile")
  Timeline                   Timeline[]
  TimelineBasespot           TimelineBasespot[]
  Tribe                      Tribe[]
}

model Role {
  id                            String       @id(map: "roles_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                          String
  createdBy                     String?      @default(dbgenerated("auth.uid()")) @db.Uuid
  permissions                   permission[]
  profile_profile_role_idTorole Profile[]    @relation("profile_role_idTorole")
}

model Timeline {
  id               String             @id(map: "timeline_pkey") @unique(map: "timeline_id_key") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  createdAt        DateTime?          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?          @db.Timestamptz(6)
  createdBy        String             @db.Uuid
  Profile          Profile            @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimelineBasespot TimelineBasespot[]
}

model Tribe {
  id          Int       @id(map: "tribe_pkey") @default(autoincrement())
  name        String
  description String?
  created_at  DateTime? @default(now())
  updated_at  DateTime?
  createdBy   String?   @default(dbgenerated("auth.uid()")) @db.Uuid
  updatedBy   String?   @db.Uuid
  Profile     Profile?  @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Message {
  id         String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  profile_id String    @default(dbgenerated("auth.uid()")) @db.Uuid
  content    String
  created_at DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  Profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Dino {
  id                             String     @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at                     DateTime?  @default(now()) @db.Timestamptz(6)
  name                           String
  synonyms                       String[]
  description                    String?
  taming_notice                  String?
  can_destroy                    String[]
  immobilized_by                 String[]
  base_stats                     Json?
  gather_eff                     Json?
  exp_per_kill                   Float?     @default(0)
  fits_through                   String[]
  egg_min                        Float?     @default(0)
  egg_max                        Float?     @default(0)
  tdps                           Float?     @default(0)
  eats                           String[]
  maturation_time                String?    @default("0")
  weight_reduction               Json?
  incubation_time                Float?     @default(0)
  affinity_needed                Float?     @default(0)
  aff_inc                        Float?     @default(0)
  flee_threshold                 Float?     @default(0)
  hitboxes                       Json?
  drops                          String[]
  food_consumption_base          Float?     @default(0)
  food_consumption_mult          Float?     @default(0)
  disable_ko                     Boolean?   @default(false)
  violent_tame                   Boolean?   @default(false)
  taming_bonus_attr              Float?     @default(0)
  disable_food                   Boolean?   @default(false)
  disable_mult                   Boolean?   @default(false)
  water_movement                 Boolean?   @default(true)
  admin_note                     String?
  base_points                    Float?
  method                         String[]
  knockout                       String[]
  non_violent_food_affinity_mult Float?
  non_violent_food_rate_mult     Float?
  taming_interval                Float?
  base_taming_time               Float?
  disable_tame                   Boolean?   @default(false)
  x_variant                      Boolean?   @default(false)
  attack                         Json?
  mounted_weaponry               Boolean?   @default(false)
  ridable                        Boolean?   @default(false)
  flyer_dino                     Boolean?   @default(false)
  water_dino                     Boolean?   @default(false)
  movement                       Json?      @default("null")
  type                           String[]
  carryable_by                   String[]
  DinoStat                       DinoStat[]
}

model Item {
  id                                           BigInt                  @id(map: "Items_pkey") @default(autoincrement())
  created_at                                   DateTime?               @default(now()) @db.Timestamptz(6)
  name                                         String
  description                                  String?
  image                                        String?
  max_stack                                    Float?
  weight                                       Float?                  @default(0)
  engram_points                                Float?                  @default(0)
  crafting_time                                Float?                  @default(0)
  req_level                                    BigInt?                 @default(0)
  yields                                       Float?                  @default(1)
  recipe                                       Json?
  stats                                        Json?
  color                                        String?                 @default("#ff0000")
  crafted_in                                   String[]
  effects                                      String[]
  type                                         String                  @default("Other")
  DinoStat                                     DinoStat[]
  ItemRecipe_ItemRecipe_crafted_item_idToItem  ItemRecipe[]            @relation("ItemRecipe_crafted_item_idToItem")
  ItemRecipe_ItemRecipe_crafting_stationToItem ItemRecipe[]            @relation("ItemRecipe_crafting_stationToItem")
  ItemRecipe_ItemRecipe_item_idToItem          ItemRecipe[]            @relation("ItemRecipe_item_idToItem")
  LootcrateSetEntryItem                        LootcrateSetEntryItem[]

  @@index([stats(ops: JsonbPathOps)], map: "idxginp", type: Gin)
}

model Map {
  id                         BigInt             @id @default(autoincrement())
  created_at                 DateTime?          @default(now()) @db.Timestamptz(6)
  name                       String?
  loot_crates                Json?
  oil_veins                  Json?
  water_veins                Json?
  wyvern_nests               Json?
  ice_wyvern_nests           Json?
  gas_veins                  Json?
  deinonychus_nests          Json?
  charge_nodes               Json?
  plant_z_nodes              Json?
  drake_nests                Json?
  glitches                   Json?
  magmasaur_nests            Json?
  poison_trees               Json?
  mutagen_bulbs              Json?
  carniflora                 Json?
  notes                      Json?
  img                        String?
  Basespot_Basespot_MapToMap Basespot[]         @relation("Basespot_MapToMap")
  Lootcrate                  Lootcrate[]
  TimelineBasespot           TimelineBasespot[]
}

model Lootcrate {
  id                 String         @id(map: "Lootcrates_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at         DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?      @default(now()) @db.Timestamptz(6)
  blueprint          String
  name               String?
  map                BigInt
  level_requirement  Json?
  decay_time         Json?
  no_repeat_in_sets  Boolean?       @default(false)
  quality_multiplier Json?
  set_qty            Json?
  color              String?
  Map                Map            @relation(fields: [map], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LootcrateSet       LootcrateSet[]
}

model LootcrateSet {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  lootcrate_id      String              @db.Uuid
  name              String?
  can_repeat_items  Boolean?            @default(false)
  qty_scale         Json?
  weight            Float?
  Lootcrate         Lootcrate           @relation(fields: [lootcrate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  LootcrateSetEntry LootcrateSetEntry[]
}

model LootcrateSetEntry {
  id                    String                  @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  set_id                String                  @db.Uuid
  name                  String?
  weight                Float?
  qty                   Json?
  quality               Json?
  LootcrateSet          LootcrateSet            @relation(fields: [set_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  LootcrateSetEntryItem LootcrateSetEntryItem[]
}

model DinoStat {
  id         String       @id(map: "DinoEffWeight_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @default(now()) @db.Timestamptz(6)
  dino_id    String       @db.Uuid
  item_id    BigInt
  value      Float?
  rank       BigInt?      @default(0)
  type       dinostattype
  Dino       Dino         @relation(fields: [dino_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Item       Item         @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dino_id, item_id, type])
}

model ItemRecipe {
  id                                     String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at                             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                             DateTime? @default(now()) @db.Timestamptz(6)
  item_id                                BigInt
  amount                                 Float     @default(1)
  crafted_item_id                        BigInt
  crafting_station                       BigInt?
  Item_ItemRecipe_crafted_item_idToItem  Item      @relation("ItemRecipe_crafted_item_idToItem", fields: [crafted_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Item_ItemRecipe_crafting_stationToItem Item?     @relation("ItemRecipe_crafting_stationToItem", fields: [crafting_station], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Item_ItemRecipe_item_idToItem          Item      @relation("ItemRecipe_item_idToItem", fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([item_id, crafted_item_id, crafting_station])
}

model LootcrateSetEntryItem {
  id                String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  entry_id          String            @db.Uuid
  item_id           BigInt
  value             Float?
  LootcrateSetEntry LootcrateSetEntry @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Item              Item              @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum permission {
  basespot_delete @map("basespot:delete")
  basespot_create @map("basespot:create")
  basespot_update @map("basespot:update")
  basespot_view   @map("basespot:view")
  role_create     @map("role:create")
  role_update     @map("role:update")
  role_delete     @map("role:delete")
  user_create     @map("user:create")
  user_update     @map("user:update")
  user_delete     @map("user:delete")
  tribe_create    @map("tribe:create")
  tribe_update    @map("tribe:update")
  tribe_delete    @map("tribe:delete")
  timeline_create @map("timeline:create")
  timeline_update @map("timeline:update")
  timeline_delete @map("timeline:delete")
  gamedata_delete @map("gamedata:delete")
  gamedata_update @map("gamedata:update")
  gamedata_create @map("gamedata:create")
}

enum user_status {
  ONLINE
  OFFLINE
}

enum dinostattype {
  food
  gather_efficiency
  weight_reduction
  immobilized_by
  fits_through
  drops
}
