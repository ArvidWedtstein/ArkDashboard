
import { Link, routes, navigate } from '@redwoodjs/router'
import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import Toast from "src/components/Util/Toast/Toast";

import { ${formattersImports} } from 'src/lib/formatters'

import type { Delete${singularPascalName}MutationVariables, Find${singularPascalName}ById } from 'types/graphql'

const DELETE_${singularConstantName}_MUTATION = gql`
  mutation Delete${singularPascalName}Mutation($id: ${idType}!) {
    delete${singularPascalName}(id: $id) {
      id
    }
  }
`

interface Props {
  ${singularCamelName}: NonNullable<Find${singularPascalName}ById['${singularCamelName}']>
}

const ${singularPascalName} = ({ ${singularCamelName} }: Props) => {
  const [delete${singularPascalName}] = useMutation(DELETE_${singularConstantName}_MUTATION, {
    onCompleted: () => {
      toast.success('${singularPascalName} deleted')
      navigate(routes.${pluralRouteName}())
    },
    onError: (error) => {
      toast.error(error.message)
    },
  })

  const onDeleteClick = (id: Delete${singularPascalName}MutationVariables['id']) => {
    toast.custom((t) => (
      <Toast
        t={t}
        title={`You are about to delete ${singularCamelName}`}
        message={`Are you sure you want to delete ${singularCamelName}?`}
        actionType="YesNo"
        primaryAction={() => delete${singularPascalName}({ variables: { id } })}
      />
    ), { position: 'top-center' });
  }

  return (
    <>
      <div className="rw-segment">
        <header className="rw-segment-header">
          <h2 className="rw-heading rw-heading-secondary">
            ${singularPascalName} {${singularCamelName}.id} Detail
          </h2>
        </header>

        <div className="mt-6 border-t border-gray-100">
          <dl className="divide-y divide-gray-100">
            <% columns.forEach(column => { %><div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
              <dt className="text-sm font-medium leading-6 text-gray-900 dark:text-white"><%= column.label %></dt><%
              if (column.displayFunction) { %>
              <dd className="mt-1 text-sm leading-6 text-gray-700 dark:text-zinc-400 sm:col-span-2 sm:mt-0">{${column.displayFunction}(${singularCamelName}.${column.name})}</dd><%
              } else { %>
              <dd className="mt-1 text-sm leading-6 text-gray-700 dark:text-zinc-400 sm:col-span-2 sm:mt-0">{${singularCamelName}.${column.name}}</dd><%
              } %>
            </div><% }) %>
          </dl>
        </div>

        <table className="rw-table">
          <tbody>
            <% columns.forEach(column => { %><tr>
              <th><%= column.label %></th><%
              if (column.displayFunction) { %>
              <td>{${column.displayFunction}(${singularCamelName}.${column.name})}</td><%
              } else { %>
              <td>{${singularCamelName}.${column.name}}</td><%
              } %>
            </tr><% }) %>
          </tbody>
        </table>
      </div>
      <nav className="rw-button-group">
        <Link
          to={routes.${editRouteName}({ id: ${singularCamelName}.id })}
          className="rw-button rw-button-blue"
        >
          Edit
        </Link>
        <button
          type="button"
          className="rw-button rw-button-red"
          onClick={() => onDeleteClick(${singularCamelName}.id)}
        >
          Delete
        </button>
      </nav>
    </>
  )
}

export default ${singularPascalName}
