import {
  Form,
  FormError,
  FieldError,
  Label,
  ${fieldsToImport.join(',\n  ')},
} from '@redwoodjs/forms'

<% if (fieldsToImport.includes('DatetimeLocalField')) { %>
import { timeTag as formatDatetime } from "src/lib/formatters";
<% } %>

import type { Edit${singularPascalName}ById, Update${singularPascalName}Input } from 'types/graphql'
import type { RWGqlError } from '@redwoodjs/forms'
import { Input } from 'src/components/Util/Input/Input';
import Button from "src/components/Util/Button/Button";

type Form${singularPascalName} = NonNullable<Edit${singularPascalName}ById['${singularCamelName}']>

interface ${singularPascalName}FormProps {
  ${singularCamelName}?: Edit${singularPascalName}ById['${singularCamelName}']
  onSave: (data: Update${singularPascalName}Input, id?: Form${singularPascalName}['id']) => void
  error: RWGqlError
  loading: boolean
}

const ${singularPascalName}Form = (props: ${singularPascalName}FormProps) => {
  const onSubmit = (data: Form${singularPascalName}) => {
  <% editableColumns.forEach(column => { %>
    <% if (column.isEnum && !column.isList && !column.isRequired) { %>
      if (data.${column.name} === '') {
        data.${column.name} = null
      }
    <% } %>
    <% if (column.isEnum && column.isList) { %>
      if (data.${column.name}) {
        data.${column.name} = data.${column.name}.filter((value) => !!value)
      }
    <% } %>
  <% }) %>
    props.onSave(data, props?.${singularCamelName}?.id)
  }

  return (
    <div className="-mt-4 text-sm">
      <Form<Form${singularPascalName}> onSubmit={onSubmit} error={props.error}>
        <FormError
          error={props.error}
          wrapperClassName="rw-form-error-wrapper"
          titleClassName="rw-form-error-title"
          listClassName="rw-form-error-list"
        />
      <% editableColumns.forEach(column => { %>
        <Input
          label="${column.label}"
          name="${column.name}"
          ${column.defaultProp}={${column.deserializeFunction && column.deserializeFunction + '('}props.${singularCamelName}?.<%= column.name %>${column.deserializeFunction && ')'}}
          <%= !column.validation ? '' : `validation=${column.validation}` %>
          <%= column.isRelationalField && !column.isRequired ? `emptyAs={'undefined'}` : '' %>
        />
        <Label
          name="${column.name}"
          className="rw-label"
          errorClassName="rw-label rw-label-error"
        >
          ${column.label}
        </Label>
        <% if (column.isEnum) { %>
          <% if (!column.isRequired) { %>
          <div className="flex items-center justify-items-center space-x-1 text-zinc-800 dark:text-zinc-200">
            <${column.component}
              id="${singularCamelName}-${column.name}-none"
              name="${column.name}"
              defaultValue=""
              ${column.defaultProp}={!props.spot?.spotType}
              className=""
              errorClassName="text-error-500"
            />
            <div className="text-gray-600">
              None
            </div>
          </div>
          <% } %>
          <% column.values?.forEach((value, i) => {
            const columnComponentName = column.isList ? `${column.name}[${i}]` : column.name
            %>
        <div className="flex items-center justify-items-center space-x-1 text-zinc-800 dark:text-zinc-200">
          <${column.component}
            id="${singularCamelName}-${column.name}-${i}"
            name="${columnComponentName}"
            defaultValue="${value.name}"
            ${column.defaultProp}={props.${singularCamelName}?.${column.name}?.includes('${value.name}')}
            className=""
            errorClassName="text-error-500"
          />
          <div>
            ${value.name.replace('_', ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}
          </div>
        </div>
          <% }) %>
        <% } else { %>
          <${column.component}
            name="${column.name}"
            ${column.defaultProp}={${column.deserializeFunction && column.deserializeFunction + '('}props.${singularCamelName}?.<%= column.name %>${column.deserializeFunction && ')'}}
            className=""
            errorClassName="text-error-500"
            <%= !column.validation ? '' : `validation=${column.validation}` %>
            <%= column.isRelationalField && !column.isRequired ? `emptyAs={'undefined'}` : '' %>
          />
        <% } %>

        <FieldError name="${column.name}" className="rw-field-error" />
<% }) %>

          <Button
            variant="outlined"
            color="success"
            type="submit"
            className="my-3"
            disabled={props.loading}
            startIcon={(
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 448 512"
                className="pointer-events-none"
                fill="currentColor"
              >
                <path d="M350.1 55.44C334.9 40.33 314.9 32 293.5 32H80C35.88 32 0 67.89 0 112v288C0 444.1 35.88 480 80 480h288c44.13 0 80-35.89 80-80V186.5c0-21.38-8.312-41.47-23.44-56.58L350.1 55.44zM96 64h192v96H96V64zM416 400c0 26.47-21.53 48-48 48h-288C53.53 448 32 426.5 32 400v-288c0-20.83 13.42-38.43 32-45.05V160c0 17.67 14.33 32 32 32h192c17.67 0 32-14.33 32-32V72.02c2.664 1.758 5.166 3.771 7.438 6.043l74.5 74.5C411 161.6 416 173.7 416 186.5V400zM224 240c-44.13 0-80 35.89-80 80s35.88 80 80 80s80-35.89 80-80S268.1 240 224 240zM224 368c-26.47 0-48-21.53-48-48S197.5 272 224 272s48 21.53 48 48S250.5 368 224 368z" />
              </svg>
            )}
          >
            Save
          </Button>
      </Form>
    </div>
  )
}

export default ${singularPascalName}Form
